import org.apache.tools.ant.taskdefs.condition.Os
import de.undercouch.gradle.tasks.download.Download
import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.10/userguide/java_library_plugin.html
 */

buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath 'de.undercouch:gradle-download-task:3.2.0'
  }
}
plugins {
  // Apply the java-library plugin to add support for Java Library
  id 'java-library'
  id "com.github.johnrengelman.shadow" version "4.0.3"
}
version '0.0.1'
dependencies {
  // This dependency is exported to consumers, that is to say found on their compile classpath.
  api 'org.apache.commons:commons-math3:3.6.1'

  // This dependency is used internally, and not exposed to consumers on their own compile classpath.
  implementation 'com.google.guava:guava:23.0'

  // Use JUnit test framework
  testImplementation 'junit:junit:4.12'
  compile group: 'com.github.jnr', name: 'jnr-ffi', version: '2.1.8'

}

// In this section you declare where to find the dependencies of your project
repositories {
  // Use jcenter for resolving your dependencies.
  // You can declare any Maven/Ivy/file repository here.
  jcenter()
}
def nativeLibsVersion = 'v0.4.0'
def tempDownloadDir = "${projectDir}/.tempDownloads"

static def getCombinations() {
  def platforms = ['win', 'linux', 'osx']
  def architectures = ['x64']
  [platforms, architectures].combinations().findAll()
}
task ("downloadNativeLibs", type: Download) {
  File dir = new File(tempDownloadDir)
  if (dir.exists()) {
    assert dir.deleteDir()
  }
  def endPoints = getCombinations().collect {
    "https://s3.eu-west-2.amazonaws.com/system-uri/system_uri-${nativeLibsVersion}-${it[0]}-${it[1]}.zip"
  }
  src(endPoints)
  dest tempDownloadDir
}
task copyTestResources(type: Copy) {
  def platform = "linux"
  def arch = "x64";
  if (Os.isFamily(Os.FAMILY_WINDOWS)) {
    platform = "win"
  } else if (Os.isFamily(Os.FAMILY_MAC)) {
    platform = "osx"
  }
  from "${projectDir}/libs/${platform}/${arch}"
  into "${buildDir}/classes/java/test/native"
}
processTestResources.dependsOn copyTestResources

tasks.addRule('Pattern: unzip-<ID>') { String taskName ->
  if (taskName.startsWith('unzip')) {
    task(taskName, type: Copy) {
      def args = name.split('-')
      String platform = args[1]
      String arch = args[2]
      from zipTree("${tempDownloadDir}/system_uri-${nativeLibsVersion}-${platform}-${arch}.zip")
      into "${projectDir}/libs/${platform}/${arch}"
    }
  }
}

task('download-nativeLibs') {
  dependsOn << [ 'downloadNativeLibs', getCombinations().collect() {
    "unzip-${it[0]}-${it[1]}" } ]
}

sourceCompatibility = "1.8"
targetCompatibility = "1.8"

tasks.addRule('Pattern: pack-<ID>') { String taskName ->
  if (taskName.startsWith('pack')) {
    task(taskName, type: ShadowJar) {
      dependsOn << [ name.replace('pack', 'NativeLibs') ]
      def args = name.split('-')
      String platform = args[1]
      String arch = args[2]
      from sourceSets.main.output
      from sourceSets.main.resources
      classifier = "${platform}-${arch}"
      version = project.version
    }
  }
}
task ('pack') {
  def tasks = getCombinations().collect {"pack-${it[0]}-${it[1]}-${it[2]}" }
  dependsOn << tasks
  doLast {
    println "Deleting default Jar..."
    File defaultJar = new File("${project.buildDir}/libs/system_uri-${project.version}.jar")
    if (defaultJar.exists()) {
      defaultJar.delete()
    }
  }
}
tasks.addRule('Pattern: NativeLibs-<ID>') { String taskName ->
  if (taskName.startsWith('NativeLibs-')) {
    task(taskName, type: Copy) {
      dependsOn << [ name.replace('NativeLibs', 'delete') ]
      def args = name.split('-')
      String platform = args[1]
      String arch = args[2]
      from "${projectDir}/libs/${platform}/${arch}/"
      into "${projectDir}/src/main/resources/native"
    }
  }
}
tasks.addRule('Pattern: delete-<ID>') { String taskName ->
  if (taskName.startsWith('delete-')) {
    task(taskName, dependsOn: build, type: Delete) {
      delete "${projectDir}/src/main/resources/native/"
      delete "${projectDir}/build/resources/main/native/"
      delete "${projectDir}/build/classes/java/test/native"
    }
  }
}
